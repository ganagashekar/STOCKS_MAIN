# -*- coding: utf-8 -*-
"""Currrent_NSEAutomate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WF7Z1TMdFwaEWgFK5YJjkWfblk_zrReU
"""

!pip install breeze-connect
!pip install mibian

from breeze_connect import BreezeConnect
import json
import sys
import bisect
import datetime
import mibian   #to easily calculate iv and greeks  (not the fastest way though)
import time
from secrets import randbelow

flt_rf = 0.1

Netexpiry_date=datetime.date(2024,6,6).strftime(r'%d-%b-%Y')
int_days_to_expiry = (datetime.datetime(2024,6,6, 0, 0, 0) - datetime.datetime.today()).days
print(int_days_to_expiry)

sys.path.append('/media/builder/briefcase/Documents/')

api_key = "6N4Hj74vE@668970816zP9K307YZ58Ff"
api_secret = "iz1F27815220!290Ie8Ha459997J8376"
api_session = '41928413'
right='call'
baseStrikeprice=0


def round_nearest(x,num=50):
    return int(round(float(x)/num)*num)

def round_down(num, divisor):
    return num - (num%divisor)


def n_highest(int_strikes_away, flt_spot, list_strikes):
    '''
    REQUIRES:
        import bisect (https://docs.python.org/3/library/bisect.html)

    INPUTS:
        int_strikes_away = how many strikes away do you want to find? negative will look ITM, positive OTM
        flt_spot = the spot price wrt which we're looking for a spot
        list_strikes = list of all available strikes

    OUTPUT:
        flt_next_highest_strike = returns the strike needed to be used
    '''
    a = sorted(list_strikes)
    flt_next_highest_strike = a[bisect.bisect_left(a, flt_spot) + int_strikes_away - 1]
    return flt_next_highest_strike

app = BreezeConnect(api_key=api_key)
app.generate_session(api_secret=api_secret,
                     session_token=api_session)
price=0;
fresh_order_id=0;
quantity=25;

price=0;
fresh_order_id=0;
quantity=25;
executedstrikeprice=0
previous_close=22530
previousprice=0

def percentage_of(pec_num, num):
    return (pec_num / 100) * num

def isbuy_strickePrice_same(executedstrikeprice,livestrikeprice):
     return float(executedstrikeprice)==float(livestrikeprice)
def calulcateChangestrikeprice(executedstrikeprice,livestrikeprice):
     return float(livestrikeprice)-float(executedstrikeprice)
def CalculateChangePercentage(spotprice,previousclose):
    return ((float(spotprice)-float(previousclose))/float(previousclose))*100
def CalculateChangePrice(spotprice,previousclose):
    return float(spotprice)-float(previousclose)
def cancelOrder(exchange,orderId):
    print(app.cancel_order(exchange_code=exchange,order_id= orderId))
def is_not_blank(s):
    return bool(s and not s.isspace())
def PercentageofNumber(number,percenatge):
    return (float(percenatge)/100)*float(number)
def modifyOrder(_cover_order_id,exchange_code,order_type,stoploss,quantity,price,disclosed_quantity,validity_date):
    modify_order = app.modify_order(order_id=_cover_order_id,
                    exchange_code=exchange_code,
                    order_type=order_type,
                    stoploss=stoploss,
                    quantity=quantity,
                    price=price,
                    validity="Day",
                    disclosed_quantity=disclosed_quantity,
                    validity_date=validity_date)
    print(modify_order)
    return modify_order['Status']==500

def GetPriceBuy(price,BullishOrBearish):
    if(BullishOrBearish=='Bearish'):
      return price-5
    if(BullishOrBearish=='BearishConfirmed'):
      return price-10
    if(BullishOrBearish=='Bullish'):
      return price-1
    if(BullishOrBearish=='BullishConfirmed'):
      return price



def FetchCalloption(cpy_fresh_order_id,executedstrikeprice,previousclose,spot_price,previousprice):
    print(cpy_fresh_order_id)
    predictionmovements='None'
    Is_negtaive30=False
    OrderPrice=0;
    reducebyPercentage=0;
    # spot_price=0
    # dict_current_quote = app.get_quotes(stock_code='NIFTY',exchange_code='NFO',product_type='options',right='Others',
    #                                     expiry_date=datetime.date(2024,5,16).strftime(r'%d-%b-%Y'),strike_price='0')['Success'][0]
    # print(dict_current_quote)
    # spot_price=dict_current_quote['spot_price'];
    print("Spot Price =" +str(spot_price))
    currentstrick=round_down(float(spot_price),50)
    print("Current Strike Price =" +str(currentstrick))
    currentstrick= float(currentstrick)+float(baseStrikeprice)

    isstrikepirce_same=isbuy_strickePrice_same(currentstrick,executedstrikeprice)
    changePercentage=CalculateChangePercentage(spot_price,previousclose)
    ChangePrice=CalculateChangePrice(spot_price,previousclose)
    change_of_strikeprice=calulcateChangestrikeprice(currentstrick,executedstrikeprice)

    call_option = app.get_quotes(stock_code='NIFTY',exchange_code='NFO', product_type='options',right=str(right),
                                      expiry_date=Netexpiry_date,strike_price=currentstrick)['Success'][0]

    # put_option = app.get_quotes(stock_code='NIFTY',exchange_code='NFO', product_type='options',right='put',
    #                                   expiry_date=datetime.date(2024,5,16).strftime(r'%d-%b-%Y'),strike_price=currentstrick)['Success'][0]
    print(f"Call option: {call_option}")
    executedstrikeprice=call_option['strike_price']
    # print(f"Put option: {put_option}")

    reducebyPercentage=50
    print("PreviosPrice" + str(previousprice))

    if(previousprice>0):
      previouspriceChange=float(call_option['best_bid_price'])-float(previousprice)

      if(previouspriceChange <=-5):
        predictionmovements='Bearish'
      if(previouspriceChange <=-10):
        predictionmovements='BearishConfirmed'
      if(previouspriceChange >=5):
        predictionmovements='Bullish'
      if(previouspriceChange >=10):
        predictionmovements='BullishConfirmed'

      previousprice=float(call_option['best_bid_price'])




    if(float(cpy_fresh_order_id) > 1):
        if(isstrikepirce_same==False):
          reducebyPercentage=50
          print(cancelOrder('NFO',cpy_fresh_order_id))
          cpy_fresh_order_id=0

        if(change_of_strikeprice <=-50):
          reducebyPercentage=15
          OrderPrice=int(float(call_option['best_bid_price']) - float(PercentageofNumber(float(call_option['best_bid_price']),reducebyPercentage)))
          OrderPrice=GetPriceBuy(OrderPrice,predictionmovements)

        if(isstrikepirce_same==True):
          reducebyPercentage=25
          OrderPrice=int(float(call_option['best_bid_price']) - float(PercentageofNumber(float(call_option['best_bid_price']),reducebyPercentage)))
          OrderPrice=GetPriceBuy(OrderPrice,predictionmovements)
          isModifiederror=modifyOrder(cpy_fresh_order_id,call_option['exchange_code'],'Limit','','25',OrderPrice,'','')
          if(isModifiederror):
            cpy_fresh_order_id=0


        if(changePercentage <= -3.0):
          Is_negtaive30=True
          reducebyPercentage=50
         #print('Is_negtaive30' + str(Is_negtaive30))

    if(float(cpy_fresh_order_id) > 1):
       return [cpy_fresh_order_id,executedstrikeprice,previousprice];
    else:
      #print(float(call_option['best_bid_price']))
      print(call_option['best_bid_price'])
      OrderPrice=int(float(call_option['best_bid_price']) - float(PercentageofNumber(float(call_option['best_bid_price']),reducebyPercentage)))
      print(call_option['best_bid_price'])
      right_action= 'call' if (str(call_option['right']).lower())=='c' else 'put'
      buy_order = app.place_order(stock_code=call_option['stock_code'],
                              exchange_code=call_option['exchange_code'],
                              # product=call_option['product_type'],
                              product='options',
                              action='buy',
                              order_type='Limit',
                              #stoploss="",
                              quantity="25",
                              #price='50',
                              price=int(OrderPrice),
                              validity="day",
                              validity_date='',
                              disclosed_quantity="",
                              expiry_date=call_option['expiry_date'],
                              right=right_action,
                              strike_price=call_option['strike_price'])
      print(buy_order)
      if(buy_order['Status']==200):
            fresh_order_id = buy_order["Success"]["order_id"]
            detail = app.get_order_detail('NFO',fresh_order_id)
            cover_order_id = detail['Success'][0]['parent_order_id']
            # status =app.subscribe_feeds(
            #                 exchange_code=str(call_option['exchange_code']),
            #                 stock_code=str(call_option['stock_code']),
            #                 product_type=str(call_option['product_type']),
            #                 expiry_date=str(call_option['expiry_date']),
            #                 strike_price=str(int(call_option['strike_price'])),
            #                 right='call', interval="1second")

            fresh_order_id = buy_order["Success"]["order_id"]
            detail = app.get_order_detail('NFO',fresh_order_id)
            cover_order_id = detail['Success'][0]['parent_order_id']
            orderId_strikeprice=[fresh_order_id,executedstrikeprice]
            return [fresh_order_id,executedstrikeprice,previousprice]
      else:
        return [cpy_fresh_order_id,executedstrikeprice,previousprice]

try:
    app.ws_disconnect()
except:
    print("Error")

app.ws_connect()
def on_ticks(cpy_fresh_order_id,cpy_executedstrikeprice,previous_close,spot_price,_previous_price):
  return FetchCalloption(cpy_fresh_order_id,cpy_executedstrikeprice,previous_close,spot_price,_previous_price);
# app.on_ticks = on_ticks

from IPython.display import clear_output
import traceback
while(True):
  try:
    dict_current_quote = app.get_quotes(stock_code='NIFTY',exchange_code='NFO',product_type='options',right='Others',
                                        expiry_date=Netexpiry_date,strike_price='0')['Success'][0]
    print(dict_current_quote)
    orderId_strikeprice= on_ticks(fresh_order_id,executedstrikeprice,previous_close,dict_current_quote['spot_price'],previousprice)

    fresh_order_id=orderId_strikeprice[0]
    executedstrikeprice=orderId_strikeprice[1]
    previousprice=orderId_strikeprice[2]
    print(fresh_order_id)
    print(executedstrikeprice)
    time.sleep(15)
    clear_output(wait=True)
  except Exception:
     traceback.print_exc()
     time.sleep(15)
     print('')
# orderId_strikeprice=FetchCalloption(fresh_order_id,executedstrikeprice,previous_close);
# fresh_order_id=orderId_strikeprice[0]
# executedstrikeprice=orderId_strikeprice[1]
# print(fresh_order_id)
# print(executedstrikeprice)

fresh_order_id=0
executedstrikeprice=0

