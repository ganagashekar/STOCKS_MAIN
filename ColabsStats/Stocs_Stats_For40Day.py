# -*- coding: utf-8 -*-
"""Copy of Yet another copy of forty1days_Stats

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KnRVXgs9TiKfAnFl4BE9F7CdQVX_Bxf7

# Install ta-lib python wrapper on Google colab

Ta-lib python wrapper : https://github.com/mrjbq7/ta-lib

Dependencies :
> To use TA-Lib for python, you need to have the **TA-Lib already installed**. ...
"""

# download TA-Lib

!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
!ls
!tar xvzf ta-lib-0.4.0-src.tar.gz
!ls
import os
os.chdir('ta-lib') # Can't use !cd in co-lab
!./configure --prefix=/usr
!make
!make install
os.chdir('../')
!ls
!pip install TA-Lib
!pip install breeze-connect
!pip install mibian
!pip install vectorbt
!pip install darts

import talib
from breeze_connect import BreezeConnect
import sys
import bisect
import datetime
import mibian   #to easily calculate iv and greeks  (not the fastest way though)
from darts import TimeSeries
import pandas as pd
import vectorbt as vb
from datetime import datetime
from datetime import timedelta

flt_rf = 0.1
int_days_to_expiry = (datetime(2024, 5, 30, 0, 0, 0) - datetime.now()).days
print(int_days_to_expiry)

sys.path.append('/media/builder/briefcase/Documents/')

api_key = "6N4Hj74vE@668970816zP9K307YZ58Ff"
api_secret = "iz1F27815220!290Ie8Ha459997J8376"
api_session = '42366835'
app = BreezeConnect(api_key=api_key)
app.generate_session(api_secret=api_secret,
                     session_token=api_session)
data = pd.read_csv('Issues.csv')
data.head()
from IPython.display import clear_output

def GetData(IssuerName,DayAgo,minutesorDays) :
    try:
      today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
      n_days_ago = today - timedelta(days=DayAgo)
      print("day ago"+str(n_days_ago))
      #print(IssuerName)
      hdata = app.get_historical_data_v2(interval=str(minutesorDays),
                                  from_date= str(n_days_ago),
                                  to_date= str(today),
                                  stock_code=str(IssuerName),
                                  exchange_code="BSE",
                                  product_type="Cash",
                                  expiry_date="",
                                  right="",
                                  strike_price="")

      data = pd.json_normalize(hdata['Success'])

      data.set_index('datetime', inplace=True)

      series = TimeSeries.from_dataframe(data, 'datetime', '#Passengers')
      from darts.models import ExponentialSmoothing

      train, val = series.split_before(pd.Timestamp('19580101'))

      model = ExponentialSmoothing()
      model.fit(train)
      prediction = model.predict(len(val))

      hammer = talib.CDLHAMMER(data['open'], data['high'], data['low'], data['close'])
      #print(hammer[hammer == 100])
      hanging_man =talib.CDLHANGINGMAN(data['open'], data['high'], data['low'], data['close'])
      buys = hammer == 100
      sells = hanging_man == -100
      pf = vbt.Portfolio.from_signals(data['close'], buys, sells, fees = 0.000)
      pf.beta()
      trade_records = pf.trades.records_readable
      #print(trade_records.sort_values("Entry Timestamp").to_string())

      trade_records['Entry Timestamp'] = pd.to_datetime(trade_records['Entry Timestamp'])

      #trade_records = trade_records.sort(['Entry Timestamp'], ascending=[False])
      trade_records_set=(trade_records[trade_records['Status'] == 'Open'])
      #print(trade_records['Entry Timestamp'].iloc[-1])

      #print(openrecords['Entry Timestamp'].iloc[0])
       #trade_records = trade_records[trade_records['Entry Timestamp'].dt.strftime('%Y-%m-%d') == (datetime.today() - timedelta(days=1)).strftime('%Y-%m-%d')]
       # trade_records=trade_records[(pd.to_datetime(trade_records['Entry Timestamp'])).strftime('%Y-%m-%d')==(datetime.today()-timedelta(days=1)).strftime('%Y-%m-%d')]
      # print(trade_records.sort_values("Entry Timestamp").to_string())

      #import json
      #pf.plot().show()
      # print(pf.stats())
      # print(pf.entry_trades.entry_price.describe())
      # print(pf.exit_trades.exit_price.describe())
      # pf.orders.records_readable
      clear_output(wait=False)
      #pf.stats()
      return [pf.stats(),trade_records_set['Entry Timestamp'].iloc[-1]]
    except:
      print(IssuerName)
df = pd.DataFrame(columns=['SecurityId','Last', 'Stockcode','BenchmarkReturn', 'TotalReturn', 'WinRate','BestTrade',
                           'WorstTrade','AvgWinningTrade'
                           'AvgLosingTrade','AvgWinningTradeDuration','AvgLosingTradeDuration',
                           'ProfitFactor','TotalTrades','TotalClosedTrades','TotalOpenTrades',
                           'MaxDrawdown','MaxDrawdownDuration','Expectancy','BuyDate'
                           ])

# stats_resuts_cpy=(GetData(str('BHAELE'),40,'30minute'))
# print(stats_resuts_cpy)
# if stats_resuts_cpy is not None:
#   stats_resuts=stats_resuts_cpy[0]
#   stats_resuts_Date=''
#   if stats_resuts_cpy[1] is not None:
#     stats_resuts_Date=stats_resuts_cpy[1]
#   df.loc[len(df.index)]={
#              'Stockcode': str('BHAELE'),
#             'BenchmarkReturn': stats_resuts['Benchmark Return [%]'],
#             'TotalReturn': stats_resuts['Total Return [%]'],
#             'WinRate': stats_resuts['Win Rate [%]'],
#             'BestTrade': stats_resuts['Best Trade [%]'],
#             'WorstTrade': stats_resuts['Worst Trade [%]'],
#             'AvgWinningTrade': stats_resuts['Avg Winning Trade [%]'],
#             'AvgLosingTrade': stats_resuts['Avg Losing Trade [%]'],
#             'AvgWinningTradeDuration': stats_resuts['Avg Winning Trade Duration'],
#             'AvgLosingTradeDuration': stats_resuts['Avg Losing Trade Duration'],
#             'ProfitFactor': stats_resuts['Profit Factor'],
#             'TotalTrades': stats_resuts['Total Trades'],
#             'TotalClosedTrades': stats_resuts['Total Closed Trades'],
#             'TotalOpenTrades': stats_resuts['Total Open Trades'],
#             'MaxDrawdown': stats_resuts['Max Drawdown [%]'],
#             'MaxDrawdownDuration': stats_resuts['Max Drawdown Duration'],
#             'Expectancy': stats_resuts['Expectancy'],

#              'BuyDate'  :stats_resuts_Date
#             }

# df.head()
# print(stats_resuts['Benchmark Return [%]'])
for index, row in data.iterrows():
  #print(str(row['IssuerName']))
  stats_resuts_cpy=(GetData(str(row['IssuerName']),1,'30minute'))
  if stats_resuts_cpy is not None:
     stats_resuts=stats_resuts_cpy[0]
     stats_resuts_Date=''
     if stats_resuts_cpy[1] is not None:
        stats_resuts_Date=stats_resuts_cpy[1]
     df.loc[len(df.index)]={
             'SecurityId':str(row['SecurityId']),
             'Last':str(row['last']),
             'Stockcode': str(row['IssuerName']),
            'BenchmarkReturn': stats_resuts['Benchmark Return [%]'],
            'TotalReturn': stats_resuts['Total Return [%]'],
            'WinRate': stats_resuts['Win Rate [%]'],
            'BestTrade': stats_resuts['Best Trade [%]'],
            'WorstTrade': stats_resuts['Worst Trade [%]'],
            'AvgWinningTrade': stats_resuts['Avg Winning Trade [%]'],
            'AvgLosingTrade': stats_resuts['Avg Losing Trade [%]'],
            'AvgWinningTradeDuration': stats_resuts['Avg Winning Trade Duration'],
            'AvgLosingTradeDuration': stats_resuts['Avg Losing Trade Duration'],
            'ProfitFactor': stats_resuts['Profit Factor'],
            'TotalTrades': stats_resuts['Total Trades'],
            'TotalClosedTrades': stats_resuts['Total Closed Trades'],
            'TotalOpenTrades': stats_resuts['Total Open Trades'],
            'MaxDrawdown': stats_resuts['Max Drawdown [%]'],
            'MaxDrawdownDuration': stats_resuts['Max Drawdown Duration'],
            'Expectancy': stats_resuts['Expectancy'],
             'BuyDate'  :stats_resuts_Date
            }
     df.to_csv('data.csv')
     df.to_excel('ICICIBANK_.xlsx')

from google.colab import files
files.download('data.csv')
files.download('ICICIBANK_.xlsx')



# portfolio = vbt.Portfolio.from_signals(
#     data['close'], buys, sells,
#     direction = 'longonly',
#     size=0.5,  # 50% of current equity
#     size_type='percent',  # Use percent of equity for sizing
#     fees=0.001,
#     init_cash=1000,
#     freq='1D',
#     min_size =1,
#     size_granularity = 1
# )

# stats = portfolio.stats()
# print("Backtesting Stats:")
# print(stats)

# print(portfolio.entry_trades.entry_price.describe())
# print(portfolio.exit_trades.exit_price.describe())
      # data.to_csv('data.csv')
      # data.to_excel('ICICIBANK_.xlsx')
      # import pandas as pd
      # data = pd.read_csv('data.csv',index_col=0,
      #             parse_dates=True,
      #             infer_datetime_format=True)

      # df = pd.read_csv('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=MSFT&apikey=demo&datatype=csv',
      #            index_col=0,
      #            parse_dates=True,
      #            infer_datetime_format=True)









from datetime import datetime, date
today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
n_days_ago = today - timedelta(days=10)
print(today)
print(n_days_ago)